;; test basic asserts
!(assert (= 1 1))
!(assert-eq (+ 2 1) (+ 1 2))
!(assert-error (/ 1 0))
!(assert-emitted '(1 2) (begin (emit 1) (emit 2)))

;; test nested loading
!(load "loaded.lurk")
!(assert-eq loaded-nested :loaded-nested)
!(assert-eq loaded :loaded)

;; test defrec
!(defrec sum (lambda (l) (if (eq l nil) 0 (+ (car l) (sum (cdr l))))))
!(assert-eq (sum '(1 2 3)) 6)

;; test env manipulation
!(clear)
!(assert-error sum)
!(set-env (eval '(let ((a 1) (b 2)) (current-env))))
!(assert-eq a 1)
!(erase-from-env a)
!(assert-error a)
!(assert-eq b 2)

;; test help meta command
!(help)
!(help hide)
!(help open)
!(help commit)

;; test hide/commit
!(hide (bignum (commit 123)) 42)
!(commit 42)

;; test calling functional commitments
!(call (lambda (x) x) 0)
!(commit (eval '(lambda (x) x)))
!(call #0x83420bafb3cb56870b10b498607c0a6314b0ea331328bbb232c74078abb5dc 0)
!(call (comm #0x83420bafb3cb56870b10b498607c0a6314b0ea331328bbb232c74078abb5dc) 0)

;; test chain and transition
!(commit (eval '(letrec ((add (lambda (counter x)
                       (let ((counter (+ counter x)))
                         (cons counter (commit (add counter)))))))
               (add 0))))
!(chain #0x5a34ed7712c5fd2f324feb0e1764b27bac9259c4b663e4601e678939a9363d 1)

!(def state0 (cons nil (comm #0x5a34ed7712c5fd2f324feb0e1764b27bac9259c4b663e4601e678939a9363d)))
!(transition state1 state0 1)
!(assert-eq (car state1) 1)
!(fetch (cdr state1))
!(transition state2 state1 4)
!(assert-eq (car state2) 5)
!(fetch (cdr state2))

!(clear)
!(commit (eval '(letrec ((add (lambda (counter x)
                       (let ((counter (+ counter x)))
                         (cons counter (bignum (commit (add counter))))))))
               (add 0))))

!(def state0 (cons nil #0x3782a9f09a9311ba5f9d41718c470ca6e83a1701cb00a90cd0a590b94f3da3))
!(transition state1 state0 1)
!(assert-eq (car state1) 1)
!(fetch (cdr state1))
!(transition state2 state1 4)
!(assert-eq (car state2) 5)
!(fetch (cdr state2))

;; test packages
!(defpackage abc)
!(in-package abc)
!(def two (.lurk.builtin.+ 1 1))
!(in-package .lurk-user)
!(assert-eq .lurk-user.abc.two 2)
!(import .lurk-user.abc.two)
!(assert-eq two 2)

;; test dump-expr/load-expr
!(dump-expr (+ 1 1) "repl-test-two")
!(load-expr two "repl-test-two")
!(assert-eq two 2)
