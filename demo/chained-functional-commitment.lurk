;; First, we define a stateful function that adds its input to an internal counter, initialized to 0.

;; The function returns a new counter value and a commitment to a replacement function wrapping the new counter.

!(commit (letrec ((add (lambda (counter x)
                          (let ((counter (+ counter x)))
                            (cons counter (commit (add counter)))))))
            (add 0)))

;; We chain a next commitment by applying the committed function to a value of 9.

!(chain #0x64fee21bad514ff18399dfc5066caebf34acc0441c9af675ba95a998077591 9)

;; The new counter value is 9, and the function returns a new functional commitment.

;; This new commitment is now the head of the chain.

;; Next, we ccreate a proof of this transition.

!(prove)

;; We can verify the proof.

!(verify "11207b18c7ff19e5453f44c56c524afd68286e2d11e1bc279d72481da32e1")

;; Now let's chain another call to the new head, adding 12 to the counter.

!(chain #0x47a1841934c42377e67725038c71987faea4d67eecc704923502f9c0e5754a 12)

;; Now the counter is 21, and we have a new head commitment.

;; Prove it.

!(prove)

;; And verify.

!(verify "61948c697ea4756c4f4c6f47d44af1e4f7174a94e16f6fac3f4e84d13ec65a")

;; One more time, we'll add 14 to the head commitment's internal state.

!(chain #0x5d5b7127c8013ab1c8bd602623e96973ea20626053f60d8c21ba07757d1344 14)

;; 21 + 14 = 35, as expected.

;; Prove.

!(prove)

;; Verify.

!(verify "4f2554b0723e723c82fda0b00368bc676f961b0024085b0b74822317a6c513")

;; Repeat indefinitely.

;; At every step, we have proof that the head commitment was correctly derived from the previous and some input.
