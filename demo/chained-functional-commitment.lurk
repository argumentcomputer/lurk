;; First, we define a stateful function that adds its input to an internal counter, initialized to 0.

;; The function returns a new counter value and a commitment to a replacement function wrapping the new counter.

!(commit (letrec ((add (lambda (counter x)
                          (let ((counter (+ counter x)))
                            (cons counter (commit (add counter)))))))
            (add 0)))

;; We chain a next commitment by applying the committed function to a value of 9.

!(chain #0x8ef25bc2228ca9799db65fd2b137a7b0ebccbfc04cf8530133e60087d403db 9)

;; The new counter value is 9, and the function returns a new functional commitment.

;; This new commitment is now the head of the chain.

;; Next, we ccreate a proof of this transition.

!(prove)

;; We can verify the proof.

!(verify "8930a611d0dcc7af859ea47e9c36cc418f8bbf039333e44325cb1d1e7fdbd4")

;; Now let's chain another call to the new head, adding 12 to the counter.

!(chain #0x4fefa63f77fc4d76831ed199d2d58876d3f77ac629a6bc453da5410a0a423a 12)

;; Now the counter is 21, and we have a new head commitment.

;; Prove it.

!(prove)

;; And verify.

!(verify "59bb86e6b8c460ef3742629c876fbeadea0ddcbb8bc6a5fdaec86dfc1c5dfb")

;; One more time, we'll add 14 to the head commitment's internal state.

!(chain #0x1e45411221613c46ae6085b960ade79ab9751f9d918de85c058bfc43c74ecd 14)

;; 21 + 14 = 35, as expected.

;; Prove.

!(prove)

;; Verify.

!(verify "7a36cc7454fbf3b0880b798eb21dcad540ab028a63ac45ebaac7c0a3198c80")

;; Repeat indefinitely.

;; At every step, we have proof that the head commitment was correctly derived from the previous and some input.
