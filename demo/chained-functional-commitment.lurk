;; First, we define a stateful function that adds its input to an internal counter, initialized to 0.

;; The function returns a new counter value and a commitment to a replacement function wrapping the new counter.

!(commit (letrec ((add (lambda (counter x)
                          (let ((counter (+ counter x)))
                            (cons counter (commit (add counter)))))))
            (add 0)))

;; We chain a next commitment by applying the committed function to a value of 9.

!(chain #0x64fee21bad514ff18399dfc5066caebf34acc0441c9af675ba95a998077591 9)

;; The new counter value is 9, and the function returns a new functional commitment.

;; This new commitment is now the head of the chain.

;; Next, we ccreate a proof of this transition.

!(prove)

;; We can verify the proof.

!(verify "7f3d461431be8938b524623db27645a1bdcb8805db1067d2cc9c5013e0928b")

;; Now let's chain another call to the new head, adding 12 to the counter.

!(chain #0x47a1841934c42377e67725038c71987faea4d67eecc704923502f9c0e5754a 12)

;; Now the counter is 21, and we have a new head commitment.

;; Prove it.

!(prove)

;; And verify.

!(verify "2033209771e7e82aaec1cdc835f95485b84a5c57d78174e1c063efe60557e7")

;; One more time, we'll add 14 to the head commitment's internal state.

!(chain #0x5d5b7127c8013ab1c8bd602623e96973ea20626053f60d8c21ba07757d1344 14)

;; 21 + 14 = 35, as expected.

;; Prove.

!(prove)

;; Verify.

!(verify "88e2918c83d6d1744e6833c955098080171b428cc71a9c0bdc4ab5c84573e")

;; Repeat indefinitely.

;; At every step, we have proof that the head commitment was correctly derived from the previous and some input.
