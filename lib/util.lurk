!(def not (lambda (x) (if x nil t)))

;; TODO: tests, but WYSIWYG.
!(def caar (lambda (x) (car (car x))))
!(def cadr (lambda (x) (car (cdr x))))
!(def cdar (lambda (x) (cdr (car x))))
!(def cddr (lambda (x) (cdr (cdr x))))
!(def caaar (lambda (x) (car (car (car x)))))
!(def caadr (lambda (x) (car (car (cdr x)))))
!(def cadar (lambda (x) (car (cdr (car x)))))
!(def caddr (lambda (x) (car (cdr (cdr x)))))
!(def cdaar (lambda (x) (cdr (car (car x)))))
!(def cdadr (lambda (x) (cdr (car (cdr x)))))
!(def cddar (lambda (x) (cdr (cdr (car x)))))
!(def cdddr (lambda (x) (cdr (cdr (cdr x)))))

!(def todo (lambda (x)
             (begin
              (emit (list :todo x))
              ;; this will error
              (break))))

!(def error (lambda (data)
              (begin
               (emit (list :error data))
              ;; this will error
              (break))))

;; This should be a macro, so we can include the unevaluated form in the error.
!(def assert (lambda (x) (if x x (error :assertion-failure nil))))

;; This should be a macro, so we can include the unevaluated form in the error.
!(def ensure (lambda (x) (if x x (fail))))

!(defrec member? (lambda (x l)
                   (if l
                       (if (eq x (car l))
                           x
                           (member? x (cdr l))))))

!(def position (lambda (elt l)
                 (letrec ((aux (lambda (l)
                                 (if (eq (car l) elt)
                                     0
                                     (+ 1 (aux (cdr l)))))))
                   (if l (aux l)))))

!(defrec nth (lambda (n l)
               (if l
                   (if (= n 0)
                       (car l)
                       (nth (- n 1) (cdr l))))))


!(defrec nth-cdr (lambda (n l)
                   (if (= n 0)
                       l
                       (cdr (nth-cdr (- n 1) l)))))

!(def nth (lambda (n l) (car (nth-cdr n l))))

!(defrec append (lambda (x y)
                  (if x
                      (cons (car x) (append (cdr x) y))
                      y)))

;; More efficient version of (append (reverse x) y)
!(defrec revappend (lambda (x y)
                     (if x
                         (revappend (cdr x) (cons (car x) y))
                         y)))

!(def getf (lambda (plist indicator)
             (letrec ((aux (lambda (plist)
                             (if plist
                                 (if (eq (car plist) indicator)
                                     (car (cdr plist))
                                     (aux (cdr (cdr plist))))))))
               (aux plist))))

!(def set-property-aux
     (lambda (plist indicator)
       (letrec ((aux (lambda (acc plist)
                       (if plist
                           (if (eq (car plist) indicator)
                               (cons acc (cdr plist))
                               (aux (cons (cadr plist)
                                          (cons (car plist) acc))
                                    (cdr (cdr plist))))))))
         (aux nil plist))))

!(def set-property (lambda (plist indicator value)
                     (let ((found (set-property-aux plist indicator)))
                       (if found
                         (revappend (car found)
                                    (cons indicator (cons value (cdr (cdr found))))) ; memoized
                         (cons indicator (cons value plist))))))

!(def update-property (lambda (plist indicator update-fn)
                     (let ((found (set-property-aux plist indicator)))
                       (if found
                         (revappend (car found)
                                    (cons indicator (cons (update-fn (car (cdr found)))
                                                          (cdr (cdr found))))) ; memoized
                         (cons indicator (cons value plist))))))

!(def fold-properties (lambda (f acc plist)
                       (letrec ((aux (lambda (acc plist)
                                       (if (cdr plist)
                                           (aux (f acc (cadr plist))
                                                (cddr plist))
                                           acc))))
                         (aux acc plist))))

!(def map-properties (lambda (f plist)
                       (letrec ((aux (lambda (plist)
                                       (if (cdr plist)
                                           (cons (f (cadr plist))
                                                 (aux (cddr plist)))))))
                         (aux plist))))

!(def assoc (lambda (item alist)
              (letrec ((aux (lambda (alist)
                              (if alist
                                  (if (eq (car (car alist)) item)
                                      (car alist)
                                      (aux (cdr alist)))))))
                (aux alist))))

!(defrec length (lambda (l) (if l (+ 1 (length (cdr l))) 0)))

!(defrec reverse
        (lambda (l)
          (letrec ((aux (lambda (acc l)
                          (if l
                              (aux (cons (car l) acc) (cdr l))
                              acc))))
            (aux nil l))))

!(def zip (lambda (a b)
            (letrec ((aux (lambda (a b)
                            (if a
                                (if b
                                    (cons (cons (car a) (car b)) (aux (cdr a) (cdr b))))))))
              (aux a b))))

!(defrec sort (lambda (l)
                (if (cdr l)
                    (let ((sorted-cdr (sort (cdr l))))
                      (if (< (car l) (car sorted-cdr))
                          (cons (car l) sorted-cdr)
                        (cons (car sorted-cdr)
                              (sort (cons (car l)
                                          (cdr sorted-cdr))))))
                  l)))

!(defrec map (lambda (f l)
               (if l
                   (cons (f (car l)) (map f (cdr l))))))

!(def permute (lambda (l seed)
                (let ((committed (map (lambda (elt)
                                        (bignum (hide (bignum (commit seed))
                                                      elt)))
                                      l))
                      (sorted (sort committed)))
                  (map (lambda (c) (open c)) sorted))))

;; exponentiate: b^e
!(defrec expt (lambda (b e)
                (if (= e 0)
                    1
                    (if (= (% e 2) 1) ;; (odd? e)
                        (* b (expt (* b b) (/ (- e 1) 2)))
                        (expt (* b b) (/ e 2))))))

;; todo: make variadic when possible
!(def compose (lambda (a b)
                (lambda (x) (a (b x)))))

;; FIXME: Remove this once #358 is fixed. This is just a workaround. The renaming is because builtin apply cannot be
;; shadowed.
!(defrec applyx (lambda (f args)
                  (if args
                      (if (cdr args)
                          (apply (f (car args)) (cdr args))
                          (f (car args))))))

!(def not (lambda (x) (if x nil t)))

!(def fold (lambda (f acc list)
             (letrec ((aux (lambda (acc list)
                             (if list
                                 (aux (f acc (car list))
                                      (cdr list))
                                 acc))))
               (aux acc list))))

