!(def position (lambda (elt l)
                 (letrec ((aux (lambda (l)
                                 (if (eq (car l) elt)
                                     0
                                     (+ 1 (aux (cdr l)))))))
                   (if l (aux l)))))

!(defrec nth (lambda (n l)
               (if l
                   (if (= n 0)
                       (car l)
                       (nth (- n 1) (cdr l))))))


!(defrec nth-cdr (lambda (n l)
                   (if (= n 0)
                       l
                       (cdr (nth-cdr (- n 1) l)))))

!(def nth (lambda (n l) (car (nth-cdr n l))))

!(defrec apply (lambda (f args)
                 (if args
                     (if (cdr args)
                         (apply (f (car args)) (cdr args))
                         (f (car args)))
                     (f))))

!(def getf (lambda (plist indicator)
             (letrec ((aux (lambda (plist)
                             (if plist
                                 (if (eq (car plist) indicator)
                                     (car (cdr plist))
                                     (aux (cdr (cdr plist))))))))
               (aux plist))))

!(def assoc (lambda (item alist)
              (letrec ((aux (lambda (alist)
                              (if alist
                                  (if (eq (car (car alist)) item)
                                      (car alist)
                                      (aux (cdr alist)))))))
                (aux alist))))

!(defrec length (lambda (l) (if l (+ 1 (length (cdr l))) 0)))

!(defrec reverse
        (lambda (l)
          (letrec ((aux (lambda (acc l)
                          (if l
                              (aux (cons (car l) acc) (cdr l))
                              acc))))
            (aux nil l))))

!(def zip (lambda (a b)
            (letrec ((aux (lambda (a b)
                            (if a
                                (if b
                                    (cons (cons (car a) (car b)) (aux (cdr a) (cdr b))))))))
              (aux a b))))

!(defrec sort (lambda (l)
                (if (cdr l)
                    (let ((sorted-cdr (sort (cdr l))))
                      (if (< (car l) (car sorted-cdr))
                          (cons (car l) sorted-cdr)
                        (cons (car sorted-cdr)
                              (sort (cons (car l)
                                          (cdr sorted-cdr))))))
                  l)))

!(defrec map (lambda (f l)
               (if l
                   (cons (f (car l)) (map f (cdr l))))))

!(def permute (lambda (l seed)
                (let ((committed (map (lambda (elt)
                                        (bignum (hide (bignum (commit seed))
                                                      elt)))
                                      l))
                      (sorted (sort committed)))
                  (map (lambda (c) (open c)) sorted))))

