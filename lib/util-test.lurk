!(load "util.lurk")

;; position
!(assert-eq 2 (position :c '(:a :b :c :d)))

;; nth
!(assert-eq :c (nth 2 '(:a :b :c :d)))
!(assert-eq :c (nth 2 '(:a :b :c :d)))

;; append
!(assert-eq nil (append nil nil))
!(assert-eq '(1) (append '(1) nil))
!(assert-eq '(1) (append nil '(1)))
!(assert-eq '(1 2 3 4) (append '(1 2) '(3 4)))

;; apply
!(assert-eq 27 (apply (lambda (x y z) (* x (+ y z))) '(3 4 5)))

;; getf
!(assert-eq 2 (getf '(:a 1 :b 2 :c 3) :b))
(emit (cons :getf-2 (getf '(:a 1 :b 2 :c 3) :b))) ; 30 iterations

!(assert-eq nil (getf '(:a 1 :b 2 :c 3) :d))

;; assoc
!(assert-eq '(:b . 2) (assoc :b '((:a . 1) (:b . 2) (:c . 3))))
(emit (cons :assoc-b (assoc :b '((:a . 1) (:b . 2) (:c . 3))))) ;; 29 iterations

!(assert-eq nil (assoc :d '((:a . 1) (:b . 2) (:c . 3))))
(emit (cons :assoc-d (assoc :d '((:a . 1) (:b . 2) (:c . 3))))) ; 44 iterations

!(assert-eq nil (assoc :d '((:a . 1) (:b . 2) (:c . 3))))

;; length
!(assert-eq 3 (length '(a b c)))
!(assert-eq 0 (length ()))

;; reverse
!(assert-eq '(c b a) (reverse '(a b c)))

;; zip
!(assert-eq '((a . 1) (b . 2) (c . 3)) (zip '(a b c) '(1 2 3)))

;; sort
!(assert-eq '(1 1 2 4 7) (sort '(7 1 4 1 2)))

;; map
!(assert-eq '(1 4 9 16) (map (lambda (x) (* x x)) '(1 2 3 4)))

;; permute
!(assert-eq '(d b c a e) (permute '(a b c d e) 123))
!(assert-eq '(e d a c b) (permute '(a b c d e) 987))

