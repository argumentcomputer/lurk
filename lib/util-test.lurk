!(load "util.lurk")

;; todo
!(assert-error (todo :rest-of-owl))

;; error
!(assert-error (error :nasty 123))

;; assert
!(assert-eq 9 (assert 9))
!(assert-error (assert (= 5 (+ 2 2))))

;; ensure
!(assert-eq 5 (ensure 5))
; current framework doesn't allow testing this.
;!(assert-error (ensure nil))

;; member
!(assert (member? 2 '(1 2 3)))
!(assert (not (member? 4 '(1 2 3 ))))

;; position
!(assert-eq 2 (position :c '(:a :b :c :d)))

;; nth
!(assert-eq :c (nth 2 '(:a :b :c :d)))
!(assert-eq :c (nth 2 '(:a :b :c :d)))

;; append
!(assert-eq nil (append nil nil))
!(assert-eq '(1) (append '(1) nil))
!(assert-eq '(1) (append nil '(1)))
!(assert-eq '(1 2 3 4) (append '(1 2) '(3 4)))

;; revappend
!(assert-eq '(3 2 1 4 5 6) (revappend '(1 2 3) '(4 5 6)))
!(assert-eq '(4 5 6) (revappend '() '(4 5 6)))

;; apply
!(assert-eq 27 (apply (lambda (x y z) (* x (+ y z))) '(3 4 5)))

;; getf
!(assert-eq 2 (getf '(:a 1 :b 2 :c 3) :b))
;(emit (cons :getf-2 (getf '(:a 1 :b 2 :c 3) :b))) ; 30 iterations
!(assert-eq nil (getf '(:a 1 :b 2 :c 3) :d))

;; set-property
!(assert-eq '(:a 1 :b 2) (set-property '(:b 2) :a 1))
!(assert-eq '(:a 1 :b 4 :c 3) (set-property '(:a 1 :b 2 :c 3) :b 4))

;; update-property
!(assert-eq '(:a 1 :b 6 :c 3) (update-property '(:a 1 :b 2 :c 3) :b (lambda (x) (* 3 x))))

;; fold-properties
!(assert-eq 6 (fold-properties (lambda (a b) (+ a b)) 0 '(:a 1 :b 2 :c 3)))

;; map-properties
!(assert-eq '(2 4 6) (map-properties (lambda (x) (* 2 x)) '(:a 1 :b 2 :c 3)))

;; assoc
!(assert-eq '(:b . 2) (assoc :b '((:a . 1) (:b . 2) (:c . 3))))
(emit (cons :assoc-b (assoc :b '((:a . 1) (:b . 2) (:c . 3))))) ;; 29 iterations

!(assert-eq nil (assoc :d '((:a . 1) (:b . 2) (:c . 3))))
(emit (cons :assoc-d (assoc :d '((:a . 1) (:b . 2) (:c . 3))))) ; 44 iterations

!(assert-eq nil (assoc :d '((:a . 1) (:b . 2) (:c . 3))))

;; length
!(assert-eq 3 (length '(a b c)))
!(assert-eq 0 (length ()))

;; reverse
!(assert-eq '(c b a) (reverse '(a b c)))

;; zip
!(assert-eq '((a . 1) (b . 2) (c . 3)) (zip '(a b c) '(1 2 3)))

;; sort
!(assert-eq '(1 1 2 4 7) (sort '(7 1 4 1 2)))

;; map
!(assert-eq '(1 4 9 16) (map (lambda (x) (* x x)) '(1 2 3 4)))

;; permute
!(assert-eq '(b d e c a) (permute '(a b c d e) 123))
!(assert-eq '(d a c e b) (permute '(a b c d e) 987))

;; expt
!(assert-eq 32 (expt 2 5))

;; compose
!(assert-eq 36 (let ((square (lambda (x) (* x x)))
                     (double (lambda (x) (* 2 x)))
                     (double-then-square (compose square double)))
                 (double-then-square 3)))

;; not
!(assert-eq t (not nil))
!(assert-eq nil (not t))
!(assert-eq nil (not 123))

;; fold
!(assert-eq 15 (fold (lambda (a b) (+ a b)) 0 '(1 2 3 4 5)))
