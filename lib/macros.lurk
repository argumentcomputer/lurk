!(load "macro.lurk") ;; this will also load util.lurk, so we omit that below. An eventual better system would only load
                     ;; dependencies once.
;; !(load "util.lurk")

!(def macro-env ())
!(def macro-env (bind-macro 'and macro-env
                            (lambda (whole)
                              (if (cdr whole)
                                  (if (cdr (cdr whole))
                                      (list 'if (cadr whole)
                                            (cons 'and (cddr whole)))
                                      (cadr whole))
                                  t))))

!(def macro-env (bind-macro 'or macro-env
                            (lambda (whole)
                              (if (cdr whole)
                                  (if (cddr whole)
                                      (list 'if (cadr whole)
                                            (cadr whole) ;; this is memoized
                                            (cons 'or (cddr whole)))
                                      (cadr whole))
                                  nil))))

!(def macro-env (bind-macro 'cond macro-env
                            (lambda (whole)
                              (letrec ((aux (lambda (clauses)
                                              (if clauses
                                                  (if (cdddr (car clauses))
                                                      (error (cons "malformed cond clause" (cdddr (car clauses))))
                                                      (list 'if
                                                            (caar clauses)
                                                            (cadar clauses)
                                                            (aux (cdr clauses))))))))
                                (aux (cdr whole))))))

!(def macro-env (bind-macro 'typecase macro-env
                            (lambda (whole)
                              (let ((var (cadr whole)))
                                (letrec ((aux (lambda (clauses)
                                                (if clauses
                                                    (if (cddar clauses)
                                                        (error (cons "malformed typecase clause" (cddar clauses)))
                                                        (cons (list (list 'type-eqq (caar clauses) var) (cadar clauses))
                                                              (aux (cdr clauses))))))))
                                  (cons 'cond (aux (cddr whole))))))))
